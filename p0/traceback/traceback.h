/** @file traceback.h
 *  @brief Function prototype(s) for traceback library
 *
 *  DO NOT EDIT THIS FILE
 *
 *  @author Michael Ashley-Rollman(mpa)
 */

#ifndef __traceback_h_
#define __traceback_h_

#include <stdio.h>

/*
 * The traceback function that is the heart of the library
 */

/**
 * @brief Print the chain of function calls in reverse order.
 *
 * @param fp Specifies where to output the trace information.
 */
void traceback(FILE *);

/**
 * @brief Get the last function call's ebp address, excluding
 * the traceback itself.
 *
 * @return The last function call's ebp address.
 */
int getFirstStack();

/**
 * @brief Get the current esp register content.
 *
 * @return 	The current esp register content.
 */
int getEspRegister();


/**
 * @brief Find a specified function in the global function 
 * symbol table. If found, return the index to the function in
 * the symbol table, return -1 otherwise.
 *
 * @param addr The specified address of the wanted function.
 *
 * @return The index to the function in the symbol table if found,
 * return -1 otherwise.
 */
int funcs_find(int addr);

/**
 * @brief Print the specified functions argument.
 *
 * @param fp	Specifies where to output the function information.
 * @param ebp	The specified function's stack base register.
 * @param func_index	The specified function's index in the global
 * 										<i><b>functions</b></i> table.
 */
void print_func(FILE * fp, int ebp, int func_index);
/**
 * @brief Print main.
 *
 * @param fp	Specifies where to output the function information.
 * @param ebp	main's stack base register.
 * @param func_index	main's index in the global
 * 										<i><b>functions</b></i> table.
 */
void print_main(FILE * fp, int ebp, int func_index);

#endif /* __traceback_h_ */
