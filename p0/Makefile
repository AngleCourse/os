##################################################################
#                                                                #
#          Do not edit this file.  Edit config.mk instead.       #
#         Do not edit this file.  Edit config.mk instead.        #
#        Do not edit this file.  Edit config.mk instead.         #
#       Do not edit this file.  Edit config.mk instead.          #
#      Do not edit this file.  Edit config.mk instead.           #
#                                                                #
#    #####        #######       #######       ######       ###   #
#   #     #          #          #     #       #     #      ###   #
#   #                #          #     #       #     #      ###   #
#    #####           #          #     #       ######        #    #
#         #          #          #     #       #                  #
#   #     #          #          #     #       #            ###   #
#    #####           #          #######       #            ###   #
#                                                                #
#                                                                #
#      Do not edit this file.  Edit config.mk instead.           #
#       Do not edit this file.  Edit config.mk instead.          #
#        Do not edit this file.  Edit config.mk instead.         #
#         Do not edit this file.  Edit config.mk instead.        #
#          Do not edit this file.  Edit config.mk instead.       #
#                                                                #
##################################################################

CC = gcc
AR = ar
#LDFLAGS = -static (see "-static" below)

# -O0 is needed so that gcc doesn't "helpfully" optimize the
# calling convention for static functions.
CFLAGS = -Wall -Werror  -gdwarf-2 -O0 -m32 -fno-stack-protector -fno-omit-frame-pointer -Itraceback/

# -fstack-protector
#Emit extra code to check for buffer overflows, such as stack smashing attacks.  
#This is done by adding a guard variable to functions
#with vulnerable objects.  This includes functions that call "alloca", 
#and functions with buffers larger than 8 bytes.  The guards are
#initialized when a function is entered and then checked when the function exits.  
#If a guard check fails, an error message is printed
#and the program exits.
#NOTE: In Ubuntu 6.10 and later versions this option is enabled by default for C, C++, ObjC, ObjC++, if none of -fno-stack-protector,
#-nostdlib, nor -ffreestanding are found.

# -fomit-frame-pointer
#Don't keep the frame pointer in a register for functions that don't need one.  This avoids the instructions to save, set up and restore
#frame pointers; it also makes an extra register available in many functions.  It also makes debugging impossible on some machines.
#On some machines, such as the VAX, this flag has no effect, because the standard calling sequence automatically handles the frame
#pointer and nothing is saved by pretending it doesn't exist.  The machine-description macro "FRAME_POINTER_REQUIRED" controls whether a
#target machine supports this flag.
#Starting with GCC version 4.6, the default setting (when not optimizing for size) for 32-bit GNU/Linux x86 and 32-bit Darwin x86 targets
#has been changed to -fomit-frame-pointer.  The default can be reverted to -fno-omit-frame-pointer by configuring GCC with the
#--enable-frame-pointer configure option.

# -I
#Add the directory dir to the list of directories to be searched for header files. 

# If you don't do this, GCC4 will emit code which causes main() to align its
# stack to a 16-byte boundary. This will cause the base pointer for that
# function to point into the middle of some padding space allocated to align the
# stack. GCC4 accesses the arguments to main through an offset stored in %ecx
# instead of %ebp.
# n.b.: -mpreferred-stack-boundary=n aligns the stack to 2^n bytes in all
# functions.
CFLAGS += -mpreferred-stack-boundary=2

DOC = doxygen

include config.mk

TRACEBACK_OBJS = traceback/traceback_globals.o \
				$(MY_TRACEBACK_OBJS:%=traceback/%)
TEST_PROGS := $(TEST_PROGS:%=tests/%)

.PHONY: update query_update html_doc print clean verify veryclean dump docfly test stack_internal stack_internal_full stack_internal_main mytest2  

all: $(TEST_PROGS) tests/add_one_test tests/verify_test test 

#doupdate:
#	./update.pl $(UPDATE_METHOD)

update:
	./update.sh $(UPDATE_METHOD)

query_update:
	./update.sh $(UPDATE_METHOD) query

%.o: %.c 
	@expand -t $(TABSTOP) $< | awk 'length > 80 \
	  { err++; \
	    errs[err] = "Warning: line " NR " in $< is longer than 80 characters"; \
	  } END { \
	    if (err > 2 && err < 1000) {for (i = 1; i <= err; i++) print errs[i]; system("sleep 5");}\
	    exit(err > 10 && err < 1000) }'
	$(CC)   -c -o $@ $(CFLAGS) $(LDFLAGS) $^ 

%.o: %.s
	@echo 'You should use the .S file extension rather than .s'
	@echo '.s does not support preprocessor directives (like #include)'
	@false

%.o: %.S
	$(CC)   -c -o $@ -DASSEMBLER $(CFLAGS) $(LDFLAGS) $^

libtraceback.a: $(TRACEBACK_OBJS)
	$(AR) rc libtraceback.a $(TRACEBACK_OBJS)

$(TEST_PROGS) tests/verify_test: %: %.o libtraceback.a
	$(CC)   -o $@ $@.o -L. libtraceback.a $(CFLAGS) $(LDFLAGS) $(LIBS) -static
	python ./symtabgen.py $@
	readelf -a $@ > $@.dump
	objdump -d $@ >> $@.dump
	#./$@


tests/add_one_test: tests/add_one.o tests/add_one_test.o
	$(CC)   -o $@ $^ $(CFLAGS) $(LDFLAGS)
	readelf -a $@ > $@.dump
	objdump -d $@ >> $@.dump

html_doc:
	$(DOC) doxygen.conf
	sphinx-apidoc -M -l -e -P -f -F -H ElfTools -A AngleNet -V 1.0 -o ./doc/elftools elftools
	sphinx-build -b html ./doc/elftools ./doc/elftools_html

PRINTOUT=traceback.ps

print:
	enscript -2rG -fCourier7 -FCourier-Bold10 -p $(PRINTOUT) \
		$(if $(strip $(TABSTOP)),-T $(TABSTOP),) \
			`find ./traceback/ -type f -regex  '.*\.[chS]' | egrep -v 'contracts.h|traceback_globals|traceback_internal' | sort`

clean:
	rm -rf traceback/*.o tests/*.o \
			libtraceback.a \
			$(TEST_PROGS) tests/add_one_test tests/verify_test \
			*~ 
	rm -f tests/tmp-our-output tests/tmp-sample-output
	rm -f MAKE.* RUN.*
	rm -f */*.pyc */*/*.pyc */*/*/*.pyc
	rm -f *.warn
	rm -f tests/dump/*
	rm -f tests/*.dump

veryclean: clean
	rm -rf ./doc

# Compare the first four lines of tests/sample.output
# to the first four lines of output from verify_test.
# What about the rest of the lines?  Take a look at
# tests/sample.output.

FIRSTLINES=sed -n '1,4p'
tests/tmp-our-output tests/tmp-sample-output: tests/verify_test

tests/tmp-sample-output: tests/sample.output
	@$(FIRSTLINES) < $< > $@

tests/tmp-our-output:
	@tests/verify_test | $(FIRSTLINES) >  $@

verify: tests/tmp-our-output tests/tmp-sample-output
	@diff -bBw tests/tmp-sample-output tests/tmp-our-output

docfly: veryclean html_doc 
	if [ -f /home/anglenet/www/projects/api/traceback/index.html ]; then \
		rm -R /home/anglenet/www/projects/api/traceback/*; \
	fi;
	if [ -f /home/anglenet/www/projects/api/elftools/index.html ]; then \
		rm -R /home/anglenet/www/projects/api/elftools/*; \
	fi;
	cp -r ./doc/traceback_html/* /home/anglenet/www/projects/api/traceback/
	cp -r ./doc/elftools_html/* /home/anglenet/www/projects/api/elftools/
	apachectl restart


stack_internal stack_internal_main stack_internal_full mytest2:
	$(CC)   -S -o tests/dump/$@.s $(CFLAGS) $(LDFLAGS) tests/$@.c
	$(CC)   -o tests/dump/$@ $(CFLAGS) $(LDFLAGS) tests/$@.c
	$(CC)   -o tests/dump/$@64 tests/$@.c
	readelf -a tests/dump/$@ > tests/dump/$@.dump
	objdump -d tests/dump/$@ >> tests/dump/$@.dump

test: stack_internal stack_internal_main stack_internal_full mytest2  


	
